import html2canvas from "html2canvas";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useRef, useState } from "react";
import { z } from "zod";

const Home: NextPage = () => {
  const [src, setSrc] = useState("");
  const captureRef = useRef<HTMLDivElement>(null);
  const [errorNotification, setErrorNotification] = useState<boolean>(false);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const file = z.instanceof(File).parse(e.target.files?.[0]);

      const allowedTypes = [
        "image/png",
        "image/jpeg",
        "image/jpg",
        "image/webp",
        "image/jfif",
      ];

      if (!allowedTypes.includes(file.type)) {
        throw new Error(
          "Solo se permiten los formatos: jpeg, png, jpg, webp y jfif."
        );
      }

      const reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = ({ target }) => {
        const result = z.string().parse(target?.result);
        setSrc(result);
      };
    } catch (err) {
      setErrorNotification(true);
      setTimeout(() => {
        setErrorNotification(false);
      }, 6000);
    }
  };

  const handleDownload = (e: React.MouseEvent) => {
    e.preventDefault();
    if (!captureRef.current) return;

    html2canvas(captureRef.current)
      .then((canvas) => {
        const a = document.createElement("a");
        a.href = canvas.toDataURL("image/png");
        a.download = crypto.randomUUID();
        a.click();
      })
      .catch((err) => console.log(err));
  };

  return (
    <>
      <Head>
        <title>SB Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-gradient-to-r from-base-100 via-accent/10 to-base-100 relative flex min-h-screen items-center justify-center    py-4 px-4 md:px-0">
        <div className="rouded-md bg-base-100/90 p-10">
          <h1 className="mb-5 text-center text-xl font-bold text-accent md:text-2xl">
            Speech Bubble Generator
          </h1>
          <input className="w-full" type="file" onChange={handleFileChange} />
          {src ? (
            <>
              <div
                className="mt-5 w-full max-w-xs overflow-hidden"
                id="capture"
                ref={captureRef}
              >
                <Image
                  width={400}
                  height={800}
                  alt="speech bubble"
                  src="/speech-bubble.png"
                  className="h-16 w-full"
                />
                <Image
                  width={400}
                  height={800}
                  alt="your image"
                  src={src}
                  className="w-full"
                />
              </div>
              <button
                className="btn-accent btn mt-6 w-full"
                onClick={handleDownload}
              >
                Download
              </button>

              {errorNotification ? <ErrorNotification /> : null}
            </>
          ) : null}
        </div>
      </main>
    </>
  );
};

export default Home;

const ErrorNotification = () => {
  return (
    <div className="alert alert-error fixed bottom-0 right-0 mx-auto mb-8 mr-8 w-auto shadow-lg">
      <div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 flex-shrink-0 stroke-current"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        <span>Solo se permiten los formatos: jpeg, png y jpg.</span>
      </div>
    </div>
  );
};
