import html2canvas from "html2canvas";
import { type NextPage } from "next";
import Head from "next/head";
import NextImage from "next/image";
import React, { useRef, useState } from "react";
import { z } from "zod";

const Home: NextPage = () => {
  const [errorNotification, setErrorNotification] = useState<boolean>(false);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const file = z.instanceof(File).parse(e.target.files?.[0]);

      const allowedTypes = [
        "image/png",
        "image/jpeg",
        "image/jpg",
        "image/webp",
        "image/jfif",
      ];

      if (!allowedTypes.includes(file.type)) {
        throw new Error(
          "Solo se permiten los formatos: jpeg, png, jpg, webp y jfif."
        );
      }

      const reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = ({ target }) => {
        const result = z.string().parse(target?.result);

        if (!canvasRef?.current) return;

        const ctx = canvasRef?.current.getContext("2d");
        if (!ctx) return;

        ctx.clearRect(0, 0, 300, 400);

        const image1 = new Image();
        image1.src = "/speech-bubble.png";
        image1.onload = () => {
          ctx.drawImage(image1, 0, 0, 300, 70);
        };

        const image2 = new Image();
        image2.src = result;
        image2.onload = () => {
          ctx.drawImage(image2, 0, 70, 300, 330);
        };
      };
    } catch (err) {
      setErrorNotification(true);
      setTimeout(() => {
        setErrorNotification(false);
      }, 6000);
    }
  };

  const handleDownload = (e: React.MouseEvent) => {
    e.preventDefault();
    if (!canvasRef?.current) return;
    const link = document.createElement("a");
    link.download = crypto.randomUUID();
    link.href = canvasRef.current.toDataURL();
    link.click();
  };

  return (
    <>
      <Head>
        <title>SB Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex min-h-screen items-center justify-center bg-gradient-to-r from-base-100 via-accent/5 to-base-100 py-4 px-4 md:px-0">
        <div className="rouded-md bg-base-300/90 p-10">
          <h1 className="mb-5 text-center text-xl font-bold text-accent md:text-2xl">
            Speech Bubble Generator
          </h1>
          <input className="w-full" type="file" onChange={handleFileChange} />
          <>
            <canvas
              className="mt-5 w-full overflow-hidden"
              width={300}
              height={400}
              id="capture"
              ref={canvasRef}
            ></canvas>
            <button
              className="btn-accent btn mt-6 w-full"
              onClick={handleDownload}
            >
              Download
            </button>

            {errorNotification ? <ErrorNotification /> : null}
          </>
        </div>
      </main>
    </>
  );
};

export default Home;

const ErrorNotification = () => {
  return (
    <div className="alert alert-error fixed bottom-0 right-0 mx-auto mb-8 mr-8 w-auto shadow-lg">
      <div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 flex-shrink-0 stroke-current"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        <span>Solo se permiten los formatos: jpeg, png y jpg.</span>
      </div>
    </div>
  );
};
