import html2canvas from "html2canvas";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import React, { useRef, useState } from "react";
import { z } from "zod";

const Home: NextPage = () => {
  const [src, setSrc] = useState("");
  const captureRef = useRef<HTMLDivElement>(null);
  const [errorNotification, setErrorNotification] = useState<boolean>(false);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      if (!e.target.files || !e.target.files[0]) return;

      const file = e?.target?.files[0];
      const allowedTypes = ["type/png", "type/jpeg", "type/jpg"];

      if (!allowedTypes.some((type) => type === file.type)) {
        throw new Error("Invalid file type");
      }

      const reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = ({ target }) => {
        const result = z.string().parse(target?.result);
        setSrc(result);
      };
    } catch (err) {
      setErrorNotification(true);

      setTimeout(() => {
        setErrorNotification(false);
      }, 6000);
    }
  };

  const handleDownload = (e: React.MouseEvent) => {
    e.preventDefault();
    if (!captureRef.current) return;

    html2canvas(captureRef.current)
      .then((canvas) => {
        const a = document.createElement("a");
        a.href = canvas.toDataURL("image/png");
        a.download = crypto.randomUUID();
        a.click();
      })
      .catch((err) => console.log(err));
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex min-h-screen items-center justify-center bg-base-200 py-4">
        <div className="rouded-md bg-base-100 p-10 shadow-md">
          <h1 className="mb-2 text-xl ">File:</h1>
          <input type="file" onChange={handleFileChange} />
          {src ? (
            <>
              <div
                className="mt-5 w-full max-w-xs overflow-hidden rounded-md"
                id="capture"
                ref={captureRef}
              >
                <Image
                  width={400}
                  height={100}
                  alt="speech bubble"
                  src="/speech-bubble.png"
                  className="h-16 w-full"
                />
                <Image
                  width={400}
                  height={800}
                  alt="your image"
                  src={src}
                  className="w-full"
                />
              </div>
              <button
                className="btn-accent btn mt-5 w-full"
                onClick={handleDownload}
              >
                Descargar pe
              </button>

              {errorNotification ? <ErrorNotification /> : null}
            </>
          ) : null}
        </div>
      </main>
    </>
  );
};

export default Home;

const ErrorNotification = () => {
  return (
    <div className="alert alert-error fixed bottom-0 right-0 mx-auto mb-8 mr-8 shadow-lg w-auto">
      <div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 flex-shrink-0 stroke-current"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        <span>Solo se permiten los formatos: jpeg, png y jpg.</span>
      </div>
    </div>
  );
};
